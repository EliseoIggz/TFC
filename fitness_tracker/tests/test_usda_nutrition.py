# Test de la Nueva API de Nutrici√≥n (USDA FoodData Central)
# ========================================================
# Para verificar que la API de USDA funciona correctamente

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.nutrition_api import NutritionService
from services.translation_service import TranslationService

def test_usda_nutrition_api():
    print("üß™ Test de la Nueva API de Nutrici√≥n (USDA FoodData Central)")
    print("=" * 70)
    
    usda_api = NutritionService()
    
    # Test 1: Verificar que la API est√° configurada
    print("\n1Ô∏è‚É£ Verificaci√≥n de Configuraci√≥n")
    print("-" * 40)
    print(f"‚úÖ API URL: {usda_api.base_url}")
    print(f"‚úÖ Timeout: {usda_api.timeout} segundos")
    print(f"‚úÖ API Key configurada: {'S√≠' if usda_api.api_key else 'No (modo p√∫blico)'}")
    
    # Test 2: B√∫squeda de alimentos
    print("\n2Ô∏è‚É£ Test de B√∫squeda de Alimentos")
    print("-" * 40)
    
    test_foods = ["chicken", "apple", "milk", "bread", "yogurt"]
    
    for food in test_foods:
        try:
            print(f"\nüîç Probando: '{food}'")
            search_results = usda_api.search_foods(food, page_size=5)
            if search_results and 'foods' in search_results:
                print(f"‚úÖ Resultados encontrados: {len(search_results['foods'])}")
                if search_results['foods']:
                    first_result = search_results['foods'][0]
                    print(f"   Primer resultado: {first_result.get('description', 'Sin descripci√≥n')}")
                    print(f"   Marca: {first_result.get('brandOwner', 'Sin marca')}")
                    print(f"   FDC ID: {first_result.get('fdcId', 'Sin ID')}")
                    print(f"   Tipo: {first_result.get('dataType', 'Desconocido')}")
            else:
                print(f"‚ùå Sin resultados para: {food}")
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda: {e}")
    
    # Test 3: Obtenci√≥n de informaci√≥n nutricional
    print("\n3Ô∏è‚É£ Test de Informaci√≥n Nutricional")
    print("-" * 40)
    
    test_combinations = [
        ("chicken", 150),
        ("rice", 100),
        ("apple", 200)
    ]
    
    for food, grams in test_combinations:
        try:
            print(f"\nüçé Probando: '{food}' - {grams}g")
            nutrition_info = usda_api.get_nutrition_info(food, grams)
            
            if 'multiple_options' in nutrition_info:
                print(f"‚úÖ M√∫ltiples opciones encontradas: {len(nutrition_info['options'])}")
                if nutrition_info['options']:
                    first_option = nutrition_info['options'][0]
                    print(f"   Primera opci√≥n: {first_option['name']}")
                    print(f"   Calor√≠as/100g: {first_option['calories_per_100g']}")
                    print(f"   Prote√≠nas/100g: {first_option['proteins_per_100g']}")
            else:
                print(f"‚úÖ Nutrici√≥n obtenida:")
                print(f"   Calor√≠as: {nutrition_info['calories']} cal")
                print(f"   Prote√≠nas: {nutrition_info['proteins']}g")
                print(f"   Carbohidratos: {nutrition_info['carbs']}g")
                print(f"   Grasas: {nutrition_info['fats']}g")
                print(f"   Producto: {nutrition_info['product_name']}")
                print(f"   FDC ID: {nutrition_info['fdc_id']}")
        except Exception as e:
            print(f"‚ùå Error obteniendo nutrici√≥n: {e}")
    
    # Test 4: Sugerencias de alimentos
    print("\n4Ô∏è‚É£ Test de Sugerencias")
    print("-" * 40)
    
    try:
        suggestions = usda_api.get_food_suggestions("yogurt")
        print(f"‚úÖ Sugerencias para 'yogurt': {len(suggestions)}")
        if suggestions:
            print(f"   Ejemplos: {', '.join(suggestions[:3])}")
    except Exception as e:
        print(f"‚ùå Error en sugerencias: {e}")
    
    # Test 5: B√∫squeda por FDC ID (opcional)
    print("\n5Ô∏è‚É£ Test de B√∫squeda por FDC ID")
    print("-" * 40)
    
    # Usar un FDC ID de ejemplo (Apple, raw, with skin)
    test_fdc_id = 171688
    
    try:
        print(f"üîç Probando FDC ID: {test_fdc_id}")
        food_info = usda_api.get_food_by_fdc_id(test_fdc_id)
        if food_info:
            print(f"‚úÖ Alimento encontrado:")
            print(f"   Nombre: {food_info['name']}")
            print(f"   FDC ID: {food_info['fdc_id']}")
        else:
            print(f"‚ö†Ô∏è  Alimento no encontrado para el FDC ID: {test_fdc_id}")
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda por FDC ID: {e}")
    
    print("\n" + "=" * 70)
    print("‚ú® Test de API de Nutrici√≥n USDA completado!")
    print("üí° Ahora tienes acceso a 300,000+ alimentos oficiales del gobierno de EE.UU.")

def test_translation_service():
    print("\nüåê Test del Servicio de Traducci√≥n (OpenAI)")
    print("=" * 60)
    
    translator = TranslationService()
    
    # Test 1: Traducci√≥n espa√±ol ‚Üí ingl√©s
    print("\n1Ô∏è‚É£ Traducci√≥n espa√±ol ‚Üí ingl√©s")
    spanish_texts = ["pollo asado", "manzana roja", "arroz integral"]
    
    for text in spanish_texts:
        try:
            english_translation = translator.translate_to_english(text)
            print(f"   '{text}' ‚Üí '{english_translation}'")
        except Exception as e:
            print(f"   ‚ùå Error traduciendo '{text}': {e}")
    
    # Test 2: Traducci√≥n ingl√©s ‚Üí espa√±ol
    print("\n2Ô∏è‚É£ Traducci√≥n ingl√©s ‚Üí espa√±ol")
    english_texts = ["grilled chicken", "red apple", "brown rice"]
    
    for text in english_texts:
        try:
            spanish_translation = translator.translate_to_spanish(text)
            print(f"   '{text}' ‚Üí '{spanish_translation}'")
        except Exception as e:
            print(f"   ‚ùå Error traduciendo '{text}': {e}")
    
    # Test 3: Detecci√≥n de idioma
    print("\n3Ô∏è‚É£ Detecci√≥n de idioma")
    test_texts = [
        ("manzana roja", "es"),
        ("red apple", "en"),
        ("pollo", "es"),
        ("chicken", "en")
    ]
    
    for text, expected_lang in test_texts:
        try:
            detected_lang = translator.detect_language(text)
            status = "‚úÖ" if detected_lang == expected_lang else "‚ùå"
            print(f"   {status} '{text}' ‚Üí {detected_lang} (esperado: {expected_lang})")
        except Exception as e:
            print(f"   ‚ùå Error detectando idioma de '{text}': {e}")
    
    # Test 4: Traducci√≥n inteligente
    print("\n4Ô∏è‚É£ Traducci√≥n inteligente")
    test_cases = [
        ("pollo asado", "en"),
        ("grilled chicken", "es"),
        ("arroz", "en"),
        ("rice", "es")
    ]
    
    for text, target_lang in test_cases:
        try:
            translation = translator.smart_translate(text, target_lang)
            print(f"   '{text}' ‚Üí '{translation}' ({target_lang})")
        except Exception as e:
            print(f"   ‚ùå Error en traducci√≥n inteligente de '{text}': {e}")
    
    print("\n‚úÖ Servicio de traducci√≥n probado")

if __name__ == "__main__":
    print("üß™ Test Completo del Nuevo Sistema de Nutrici√≥n")
    print("=" * 80)
    print("üîß APIs: USDA FoodData Central + OpenAI")
    print("üåê Traducci√≥n: Espa√±ol ‚Üî Ingl√©s autom√°tica")
    print("üìä Base de datos: 300,000+ alimentos oficiales del gobierno de EE.UU.")
    print("=" * 80)
    
    try:
        # Probar servicio de traducci√≥n
        test_translation_service()
        
        # Probar API de USDA
        test_usda_nutrition_api()
        
        print("\n" + "=" * 80)
        print("üéâ ¬°Todas las pruebas completadas exitosamente!")
        print("‚úÖ El nuevo sistema de nutrici√≥n est√° funcionando correctamente")
        print("üí° Ahora tienes acceso a la base de datos oficial de USDA")
        print("üåê Con traducci√≥n autom√°tica espa√±ol-ingl√©s")
        print("üîë Recomendaci√≥n: Obtener API key gratuita en https://fdc.nal.usda.gov/api-key-signup.html")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        print("üîç Verificar configuraci√≥n de APIs y conexi√≥n a internet")
