# Test de la Nueva API de Nutrici√≥n (Open Food Facts)
# ==================================================
# Para verificar que la API real funciona correctamente

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.nutrition_api import NutritionAPI

def test_nutrition_api():
    print("üß™ Test de la Nueva API de Nutrici√≥n (Open Food Facts)")
    print("=" * 60)
    
    nutrition_api = NutritionAPI()
    
    # Test 1: Verificar que la API est√° configurada
    print("\n1Ô∏è‚É£ Verificaci√≥n de Configuraci√≥n")
    print("-" * 40)
    print(f"‚úÖ API URL: {nutrition_api.api_url}")
    print(f"‚úÖ Timeout: {nutrition_api.timeout} segundos")
    print(f"‚úÖ Usando API real: {nutrition_api.use_real_api}")
    
    # Test 2: B√∫squeda de alimentos
    print("\n2Ô∏è‚É£ Test de B√∫squeda de Alimentos")
    print("-" * 40)
    
    test_foods = ["pollo", "manzana", "leche", "pan", "yogur"]
    
    for food in test_foods:
        try:
            print(f"\nüîç Probando: '{food}'")
            search_results = nutrition_api.search_food(food)
            print(f"‚úÖ Resultados encontrados: {len(search_results)}")
            if search_results:
                print(f"   Primer resultado: {search_results[0]['name']}")
                print(f"   Marca: {search_results[0]['brand']}")
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda: {e}")
    
    # Test 3: Obtenci√≥n de informaci√≥n nutricional
    print("\n3Ô∏è‚É£ Test de Informaci√≥n Nutricional")
    print("-" * 40)
    
    test_combinations = [
        ("pollo", 150),
        ("arroz", 100),
        ("manzana", 200)
    ]
    
    for food, grams in test_combinations:
        try:
            print(f"\nüçé Probando: '{food}' - {grams}g")
            nutrition_info = nutrition_api.get_nutrition_info(food, grams)
            print(f"‚úÖ Nutrici√≥n obtenida:")
            print(f"   Calor√≠as: {nutrition_info['calories']} cal")
            print(f"   Prote√≠nas: {nutrition_info['proteins']}g")
            print(f"   Carbohidratos: {nutrition_info['carbs']}g")
            print(f"   Grasas: {nutrition_info['fats']}g")
            print(f"   Producto: {nutrition_info['product_name']}")
            print(f"   Marca: {nutrition_info['brand']}")
        except Exception as e:
            print(f"‚ùå Error obteniendo nutrici√≥n: {e}")
    
    # Test 4: Sugerencias de alimentos
    print("\n4Ô∏è‚É£ Test de Sugerencias")
    print("-" * 40)
    
    try:
        suggestions = nutrition_api.get_food_suggestions("yogur")
        print(f"‚úÖ Sugerencias para 'yogur': {len(suggestions)}")
        if suggestions:
            print(f"   Ejemplos: {', '.join(suggestions[:3])}")
    except Exception as e:
        print(f"‚ùå Error en sugerencias: {e}")
    
    # Test 5: B√∫squeda por c√≥digo de barras (opcional)
    print("\n5Ô∏è‚É£ Test de B√∫squeda por C√≥digo de Barras")
    print("-" * 40)
    
    # Usar un c√≥digo de barras de ejemplo (Coca-Cola)
    test_barcode = "5449000000996"
    
    try:
        print(f"üîç Probando c√≥digo: {test_barcode}")
        product_info = nutrition_api.get_product_by_barcode(test_barcode)
        if product_info:
            print(f"‚úÖ Producto encontrado:")
            print(f"   Nombre: {product_info['name']}")
            print(f"   Marca: {product_info['brand']}")
            print(f"   C√≥digo: {product_info['barcode']}")
        else:
            print(f"‚ö†Ô∏è  Producto no encontrado para el c√≥digo: {test_barcode}")
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda por c√≥digo: {e}")
    
    print("\n" + "=" * 60)
    print("‚ú® Test de API de Nutrici√≥n completado!")
    print("üí° Ahora tienes acceso a 2.5+ millones de productos reales")

if __name__ == "__main__":
    test_nutrition_api()
